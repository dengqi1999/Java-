Java中常见的代理模式有：静态代理和动态代理，动态代理又可以使用JVM的动态代理，还可以使用Cglib来实现动态代理。

静态代理就是在程序运行前，代理类的class已经生成，动态代理，代理类在程序运行时创建的代理方式被成为动态代理。

1. 静态代理首先定义接口，让被代理类和代理都去实现这个接口，然后将被代理类注入到代理类中，最终通过调用代理类实现代理。
```java 
/**
 * 定义功能接口
 */
public interface Function {
    //每个具体实现类必须要实现的方法
    public void myfunction();
}

/**
 * 具体功能实现类，实现了系统的登录功能
 */
public class LoginFunction implements Function {
    @Override
    public void myfunction() {
        System.out.println("登录系统成功！");
        //登录系统
    }
}

/**
 * 代理类，可以拓展被代理类的功能，比如可以进行登录统计，登录拦截和验证，日志等功能
 */
public class Proxy implements Function{
    private Function function;

    //在创建代理类时，将被代理类指定注入
    public Proxy(Function function) {
        this.function = function;
    }

    @Override
    public void myfunction() {
        //验权
        System.out.println("登录验证");
        function.myfunction();
        //日志
        System.out.println("有人登录");
        
    }
}
public class Main {
    public static void main(String[]args){
        //生成被代理类，只要是实现function接口的类就行
        LoginFunction loginFunction=new LoginFunction();
        //代理拓展，为被代理类拓展功能
        Proxy proxy=new Proxy(loginFunction);
        proxy.myfunction();
    }
}
```
以上是基于接口简单实现的代理模式，这种模式有缺点，需要为每个接口都维护一个代理类，接口过多，则会使工作的复杂度急剧提升。

2.JDK的代理类所在包:java.lang.reflect.Proxy,JDK实现代理只需要使用newProxyInstance方法,但是该方法需要接收三个参数,完整的写法是:
```java 
static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces,InvocationHandler h )
注意该方法是在Proxy类中是静态方法,且接收的三个参数依次为:
ClassLoader loader,:指定当前目标对象使用类加载器,获取加载器的方法是固定的
Class<?>[] interfaces,:目标对象实现的接口的类型,使用泛型方式确认类型
InvocationHandler h:事件处理,执行目标对象的方法时,会触发事件处理器的方法,会把当前执行目标对象的方法作为参数
```     
前两个参数分别是ClassLoader是被代理类的加载器，interfaces是被代理类实现的接口。第三个是事件处理器，即我们要在代理类之前或者之后执行的操作，比如验权和统计等。
InvocationHandle是一个接口，里面只有一个方法，源码如下：
```java
public interface InvocationHandler {
    //第一个参数是生成的动态代理类，第二个参数是代理接口中的方法，第三个是传递的参数
    public Object invoke(Object proxy, Method method, Object[] args)
        throws Throwable;
}
```
demo代码如下，接口和接口的实现参照上一个例子：
```java
/**
 * 实现指定的接口，并在里面实现需要执行的操作
 */
public class JDKProxy implements InvocationHandler {
    /**
     * 这个就是我们要代理的真实对象
     */
    private Object subject;

    /**
     * 构造方法，给我们要代理的真实对象赋初值
     * @param subject
     */
    public JDKProxy(Object subject)
    {
        this.subject = subject;
    }
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        //一个测试代码，测试proxy是不是我们生成的动态代理类的实例，加上这一句代码会导致StackOverflowError，不断的循环调用自己
        //((Function)proxy).myfunction();
        //方法执行之前的工作
        System.out.println("登录成功");
        Object returnValue = method.invoke(subject,args);
        //方法执行之后的工作
        System.out.println("记录日志");
        return returnValue;
    }
}

public class Main {
    public static void main(String[]args){
        //生成被代理类，只要是实现function接口的类就行
        LoginFunction loginFunction=new LoginFunction();
        //调用java.lang.reflect.Proxy的静态方法构造动态代理对象,传入指定的参数即可获得动态代理对象
        Function function= (Function) Proxy.newProxyInstance(loginFunction.getClass().getClassLoader(),
                                                             loginFunction.getClass().getInterfaces(),
                                                             new JDKProxy(loginFunction));
        function.myfunction();

    }
}
```
与静态代理相比，我们不需要去实现其他的接口，也不需要去维护这些接口的方法，因为如果一个接口中的方法被改变，比如增加一个方法，我们就需要在静态的代理类中去维护这些方法，使用jdk的动态代理，我们就不需要去关心接口，可
以大大减少代码量
缺点：需要被代理的类实现至少一个接口。
参考资料：
JDK动态代理详解：https://www.iteye.com/blog/rejoy-1627405
https://blog.csdn.net/jiankunking/article/details/52143504

3.使用CglibCglib代理,也叫作子类代理,是基于asm框架，实现了无反射机制进行代理，利用空间来换取了时间，代理效率高于jdk ,它是在内存中构建一个子类对象从而实现对目标对象功能的扩展.它有如下特点:       
- JDK的动态代理有一个限制,就是使用动态代理的对象必须实现一个或多个接口,如果想代理没有实现接口的类,就可以使用Cglib实现.
- Cglib是一个强大的高性能的代码生成包,它可以在运行期扩展java类与实现java接口.它广泛的被许多AOP的框架使用,例如Spring AOP和synaop,为他们提供方法的interception(拦截)
- Cglib包的底层是通过使用一个小而快的字节码处理框架ASM来转换字节码并生成新的类.不鼓励直接使用ASM,因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉.
- 需要引入cglib的jar文件,但是Spring的核心包中已经包括了Cglib功能,所以直接引入pring-core-3.2.5.jar即可.
- 引入功能包后,就可以在内存中动态构建子类
- 代理的类不能为final,否则报错
- 目标对象的方法如果为final/static,那么就不会被拦截,即不会执行目标对象额外的业务方法.

demo代码如下：
```java
//首先需要在项目中引入Cglib包，我使用得是maven项目，即在pom文件中引入
<!-- https://mvnrepository.com/artifact/cglib/cglib -->
    <dependency>
      <groupId>cglib</groupId>
      <artifactId>cglib</artifactId>
      <version>3.3.0</version>
    </dependency>

/**
 * 实现指定的接口，并编写我们需要的方法
*/
public class CglibProxy implements MethodInterceptor {
    private Object target;

    public CglibProxy(Object object){
        this.target=object;
    }

    @Override
    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {
        System.out.println("权限验证");

        //执行目标对象的方法
        Object returnValue = method.invoke(target, objects);

        System.out.println("日志记录");

        return returnValue;
    }
}
/**
 * 主要的使用的类
 */
public class Main {
    public static void main(String[]args){
        //生成被代理类，只要是实现function接口的类就行
        LoginFunction loginFunction=new LoginFunction();
        //1.工具类
        Enhancer en = new Enhancer();
        //2.设置父类
        en.setSuperclass(loginFunction.getClass());
        //3.设置回调函数
        en.setCallback(new CglibProxy(loginFunction));
        //4.创建子类(代理对象)
        Function function= (Function) en.create();
        function.myfunction();
    }
}
```
使用CGLIB即使代理类没有实现任何接口也可以实现动态代理功能。CGLIB具有简单易用，它的运行速度要远远快于JDK的核心类。

